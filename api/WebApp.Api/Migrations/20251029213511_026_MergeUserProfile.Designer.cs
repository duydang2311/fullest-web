// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Domain.Entities;
using WebApp.Infrastructure.Data;

#nullable disable

namespace WebApp.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251029213511_026_MergeUserProfile")]
    partial class _026_MergeUserProfile
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "namespace_kind", new[] { "none", "user" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "status_category", new[] { "active", "canceled", "completed", "none", "pending" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("CommentHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("LabelHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("PermissionHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("PriorityHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("ProjectHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("ProjectMemberHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("RoleHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("StatusHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("TagHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("TaskHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("UserAuthHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("UserHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("UserSessionHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.Entity("WebApp.Domain.Entities.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "CommentHiLoSequence");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("ContentJson")
                        .HasColumnType("jsonb")
                        .HasColumnName("content_json");

                    b.Property<string>("ContentPreview")
                        .HasColumnType("text")
                        .HasColumnName("content_preview");

                    b.Property<Instant>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_comments_author_id");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_comments_deleted_time");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_comments_task_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Label", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "LabelHiLoSequence");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_labels");

                    b.ToTable("labels", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Namespace", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<NamespaceKind>("Kind")
                        .HasColumnType("namespace_kind")
                        .HasColumnName("kind");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_namespaces");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_namespaces_user_id");

                    b.ToTable("namespaces", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "PermissionHiLoSequence");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_name");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Priority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "PriorityHiLoSequence");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rank")
                        .UseCollation("C");

                    b.HasKey("Id")
                        .HasName("pk_priorities");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_priorities_project_id");

                    b.ToTable("priorities", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "ProjectHiLoSequence");

                    b.Property<string>("About")
                        .HasColumnType("text")
                        .HasColumnName("about");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("DefaultPriorityId")
                        .HasColumnType("bigint")
                        .HasColumnName("default_priority_id");

                    b.Property<long?>("DefaultStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("default_status_id");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("NamespaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("namespace_id");

                    b.Property<string>("Summary")
                        .HasColumnType("text")
                        .HasColumnName("summary");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("DefaultPriorityId")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_default_priority_id");

                    b.HasIndex("DefaultStatusId")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_default_status_id");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_projects_deleted_time");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_projects_user_id");

                    b.HasIndex("NamespaceId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_namespace_id_identifier");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "ProjectMemberHiLoSequence");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_project_members");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_project_members_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_project_members_user_id");

                    b.HasIndex("ProjectId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_members_project_id_user_id");

                    b.ToTable("project_members", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectTag", b =>
                {
                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("ProjectId", "TagId")
                        .HasName("pk_project_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_project_tags_tag_id");

                    b.ToTable("project_tags", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectTaskCounter", b =>
                {
                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<long>("Count")
                        .HasColumnType("bigint")
                        .HasColumnName("count");

                    b.HasKey("ProjectId")
                        .HasName("pk_project_task_counters");

                    b.ToTable("project_task_counters", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "RoleHiLoSequence");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("rank");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.RolePermission", b =>
                {
                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("PermissionId", "RoleId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_permissions_role_id");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "StatusHiLoSequence");

                    b.Property<StatusCategory>("Category")
                        .HasColumnType("status_category")
                        .HasColumnName("category");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rank")
                        .UseCollation("C");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_statuses_project_id");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "TagHiLoSequence");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TaskEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "TaskHiLoSequence");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<Instant>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<Instant?>("DueTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_time");

                    b.Property<string>("DueTz")
                        .HasColumnType("text")
                        .HasColumnName("due_tz");

                    b.Property<long?>("InitialCommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("initial_comment_id");

                    b.Property<long?>("PriorityId")
                        .HasColumnType("bigint")
                        .HasColumnName("priority_id");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<long>("PublicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("public_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PublicId"));

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Instant>("UpdatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_time");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_tasks_author_id");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_tasks_deleted_time");

                    b.HasIndex("InitialCommentId")
                        .IsUnique()
                        .HasDatabaseName("ix_tasks_initial_comment_id");

                    b.HasIndex("PriorityId")
                        .HasDatabaseName("ix_tasks_priority_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_tasks_project_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_tasks_status_id");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TaskEntityAssignee", b =>
                {
                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("TaskId", "UserId")
                        .HasName("pk_task_assignees");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_task_assignees_user_id");

                    b.ToTable("task_assignees", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TaskLabel", b =>
                {
                    b.Property<long>("LabelId")
                        .HasColumnType("bigint")
                        .HasColumnName("label_id");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("task_id");

                    b.HasKey("LabelId", "TaskId")
                        .HasName("pk_task_label");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_task_label_task_id");

                    b.ToTable("task_label", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "UserHiLoSequence");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("DisplayName")
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("ImageKey")
                        .HasColumnType("text")
                        .HasColumnName("image_key");

                    b.Property<string>("ImageVersion")
                        .HasColumnType("text")
                        .HasColumnName("image_version");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_users_deleted_time");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_users_name");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "UserAuthHiLoSequence");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_auths");

                    b.HasIndex("UserId", "Provider")
                        .IsUnique()
                        .HasDatabaseName("ix_user_auths_user_id_provider");

                    b.ToTable("user_auths", (string)null);

                    b.HasDiscriminator<string>("Provider");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "UserSessionHiLoSequence");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<byte[]>("Token")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_sessions");

                    b.HasIndex("UserId", "Token")
                        .IsUnique()
                        .HasDatabaseName("ix_user_sessions_user_id_token");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuthCredentials", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.UserAuth");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hash");

                    b.ToTable("user_auths", (string)null);

                    b.HasDiscriminator().HasValue("Credentials");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuthGoogle", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.UserAuth");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("google_id");

                    b.ToTable("user_auths", (string)null);

                    b.HasDiscriminator().HasValue("Google");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Comment", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_author_id");

                    b.HasOne("WebApp.Domain.Entities.TaskEntity", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_tasks_task_id");

                    b.Navigation("Author");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Namespace", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("WebApp.Domain.Entities.Namespace", "UserId")
                        .HasConstraintName("fk_namespaces_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Priority", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany("Priorities")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_priorities_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Priority", "DefaultPriority")
                        .WithOne()
                        .HasForeignKey("WebApp.Domain.Entities.Project", "DefaultPriorityId")
                        .HasConstraintName("fk_projects_priorities_default_priority_id");

                    b.HasOne("WebApp.Domain.Entities.Status", "DefaultStatus")
                        .WithOne()
                        .HasForeignKey("WebApp.Domain.Entities.Project", "DefaultStatusId")
                        .HasConstraintName("fk_projects_statuses_default_status_id");

                    b.HasOne("WebApp.Domain.Entities.Namespace", "Namespace")
                        .WithMany("Projects")
                        .HasForeignKey("NamespaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_namespaces_namespace_id");

                    b.HasOne("WebApp.Domain.Entities.User", null)
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_projects_users_user_id");

                    b.Navigation("DefaultPriority");

                    b.Navigation("DefaultStatus");

                    b.Navigation("Namespace");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_roles_role_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_users_user_id");

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectTag", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_tags_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_tags_tags_tag_id");

                    b.Navigation("Project");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("WebApp.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Status", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany("Statuses")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_statuses_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TaskEntity", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_users_author_id");

                    b.HasOne("WebApp.Domain.Entities.Comment", "InitialComment")
                        .WithOne()
                        .HasForeignKey("WebApp.Domain.Entities.TaskEntity", "InitialCommentId")
                        .HasConstraintName("fk_tasks_comments_initial_comment_id");

                    b.HasOne("WebApp.Domain.Entities.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .HasConstraintName("fk_tasks_priorities_priority_id");

                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tasks_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .HasConstraintName("fk_tasks_statuses_status_id");

                    b.Navigation("Author");

                    b.Navigation("InitialComment");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TaskEntityAssignee", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_assignees_tasks_task_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_assignees_users_user_id");

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TaskLabel", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Label", "Label")
                        .WithMany()
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_label_labels_label_id");

                    b.HasOne("WebApp.Domain.Entities.TaskEntity", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_task_label_tasks_task_id");

                    b.Navigation("Label");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuth", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany("Auths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_auths_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Namespace", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.Navigation("Priorities");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Statuses");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.TaskEntity", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Auths");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
