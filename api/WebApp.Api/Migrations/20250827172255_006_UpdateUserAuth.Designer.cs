// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Infrastructure.Data;

#nullable disable

namespace WebApp.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250827172255_006_UpdateUserAuth")]
    partial class _006_UpdateUserAuth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("ProjectHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("ProjectMemberHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("RoleHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("UserAuthHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("UserHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.HasSequence("UserSessionHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "ProjectHiLoSequence");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("creator_id");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_projects_deleted_time");

                    b.HasIndex("CreatorId", "Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_creator_id_identifier");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "ProjectMemberHiLoSequence");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_project_members");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_project_members_role_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_project_members_user_id");

                    b.HasIndex("ProjectId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_members_project_id_user_id");

                    b.ToTable("project_members", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "RoleHiLoSequence");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.RolePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permission");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_permission");

                    b.HasIndex("RoleId", "Permission")
                        .IsUnique()
                        .HasDatabaseName("ix_role_permission_role_id_permission");

                    b.ToTable("role_permission", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "UserHiLoSequence");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_users_deleted_time");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_users_name");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "UserAuthHiLoSequence");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_auths");

                    b.HasIndex("UserId", "Provider")
                        .IsUnique()
                        .HasDatabaseName("ix_user_auths_user_id_provider");

                    b.ToTable("user_auths", (string)null);

                    b.HasDiscriminator<string>("Provider");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "UserSessionHiLoSequence");

                    b.Property<Instant>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time")
                        .HasDefaultValueSql("now()");

                    b.Property<byte[]>("Token")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_sessions");

                    b.HasIndex("UserId", "Token")
                        .IsUnique()
                        .HasDatabaseName("ix_user_sessions_user_id_token");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuthCredentials", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.UserAuth");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hash");

                    b.ToTable("user_auths", (string)null);

                    b.HasDiscriminator().HasValue("Credentials");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuthGoogle", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.UserAuth");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("google_id");

                    b.ToTable("user_auths", (string)null);

                    b.HasDiscriminator().HasValue("Google");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "Creator")
                        .WithMany("Projects")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_projects_users_creator_id");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_projects_project_id");

                    b.HasOne("WebApp.Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_role_role_id");

                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_project_members_users_user_id");

                    b.Navigation("Project");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permission_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuth", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany("Auths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_auths_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserSession", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.Role", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Auths");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
