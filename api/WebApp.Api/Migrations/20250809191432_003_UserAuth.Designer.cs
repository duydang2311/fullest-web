// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApp.Infrastructure.Data;

#nullable disable

namespace WebApp.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250809191432_003_UserAuth")]
    partial class _003_UserAuth
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("EntityFrameworkHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.Entity("WebApp.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "EntityFrameworkHiLoSequence");

                    b.Property<Instant?>("DeletedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("DeletedTime")
                        .HasDatabaseName("ix_users_deleted_time");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_users_name");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuth", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "EntityFrameworkHiLoSequence");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_auth");

                    b.HasIndex("UserId", "Provider")
                        .IsUnique()
                        .HasDatabaseName("ix_user_auth_user_id_provider");

                    b.ToTable("user_auth", (string)null);

                    b.HasDiscriminator<string>("Provider");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuthCredentials", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.UserAuth");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("hash");

                    b.ToTable("user_auth", (string)null);

                    b.HasDiscriminator().HasValue("Credentials");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuthGoogle", b =>
                {
                    b.HasBaseType("WebApp.Domain.Entities.UserAuth");

                    b.Property<string>("GoogleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("google_id");

                    b.ToTable("user_auth", (string)null);

                    b.HasDiscriminator().HasValue("Google");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.UserAuth", b =>
                {
                    b.HasOne("WebApp.Domain.Entities.User", "User")
                        .WithMany("Auths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_auth_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Auths");
                });
#pragma warning restore 612, 618
        }
    }
}
